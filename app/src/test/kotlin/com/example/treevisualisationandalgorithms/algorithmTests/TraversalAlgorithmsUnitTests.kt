package com.example.treevisualisationandalgorithms.algorithmTests
import com.example.treevisualisationandalgorithms.datastructures.BinarySearchTree
import com.example.treevisualisationandalgorithms.datastructures.BinaryTree
import com.example.treevisualisationandalgorithms.datastructures.NaryTree
import junit.framework.TestCase


class TraversalAlgorithmsUnitTests: TestCase() {

    fun testBinaryTreePreOrder() {
        val binary = BinaryTree()
        binary.loadTree(1)
        binary.loadTree(2)
        binary.loadTree(3)
        binary.loadTree(4)
        binary.loadTree(5)
        binary.loadTree(6)
        binary.loadTree(7)
        binary.loadTree(8)
        binary.loadTree(9)
        binary.loadTree(10)
        binary.loadTree(11)
        binary.loadTree(12)
        binary.loadTree(13)
        binary.loadTree(14)
        binary.loadTree(15)
        binary.exploredNodesPreOrder(binary.root)
        val result = binary.getTraversalNodesDisplayed()
        val expected = listOf(1,2,4,8,9,5,10,11,3,6,12,13,7,14,15)
        assertEquals(expected, result)
    }

    fun testBinaryTreePostOrder() {
        val binary = BinaryTree()
        binary.loadTree(1)
        binary.loadTree(2)
        binary.loadTree(3)
        binary.loadTree(4)
        binary.loadTree(5)
        binary.loadTree(6)
        binary.loadTree(7)
        binary.loadTree(8)
        binary.loadTree(9)
        binary.loadTree(10)
        binary.loadTree(11)
        binary.loadTree(12)
        binary.loadTree(13)
        binary.loadTree(14)
        binary.loadTree(15)
        binary.exploredNodesPostOrder(binary.root)
        val result = binary.getTraversalNodesDisplayed()
        val expected = listOf(8,9,4,10,11,5,2,12,13,6,14,15,7,3,1)
        assertEquals(expected, result)
    }

    fun testBinaryTreeInOrder() {
        val binary = BinaryTree()
        binary.loadTree(1)
        binary.loadTree(2)
        binary.loadTree(3)
        binary.loadTree(4)
        binary.loadTree(5)
        binary.loadTree(6)
        binary.loadTree(7)
        binary.loadTree(8)
        binary.loadTree(9)
        binary.loadTree(10)
        binary.loadTree(11)
        binary.loadTree(12)
        binary.loadTree(13)
        binary.loadTree(14)
        binary.loadTree(15)
        binary.exploredNodesInOrder(binary.root)
        val result = binary.getTraversalNodesDisplayed()
        val expected = listOf(8,4,9,2,10,5,11,1,12,6,13,3,14,7,15)
        assertEquals(expected, result)
    }

    fun testBinarySearchTreePreOrder() {
        val bst = BinarySearchTree()
        bst.loadTree(41)
        bst.loadTree(20)
        bst.loadTree(65)
        bst.loadTree(11)
        bst.loadTree(29)
        bst.loadTree(50)
        bst.loadTree(91)
        bst.loadTree(5)
        bst.loadTree(15)
        bst.loadTree(24)
        bst.loadTree(32)
        bst.loadTree(45)
        bst.loadTree(55)
        bst.loadTree(72)
        bst.loadTree(99)
        bst.exploredNodesPreOrder(bst.root)
        val result = bst.getTraversalNodesDisplayed()
        val expected = listOf(41,20,11,5,15,29,24,32,65,50,45,55,91,72,99)
        assertEquals(expected, result)
    }

    fun testBinarySearchTreePostOrder() {
        val bst = BinarySearchTree()
        bst.loadTree(41)
        bst.loadTree(20)
        bst.loadTree(65)
        bst.loadTree(11)
        bst.loadTree(29)
        bst.loadTree(50)
        bst.loadTree(91)
        bst.loadTree(5)
        bst.loadTree(15)
        bst.loadTree(24)
        bst.loadTree(32)
        bst.loadTree(45)
        bst.loadTree(55)
        bst.loadTree(72)
        bst.loadTree(99)
        bst.exploredNodesPostOrder(bst.root)
        val result = bst.getTraversalNodesDisplayed()
        val expected = listOf(5,15,11,24,32,29,20,45,55,50,72,99,91,65,41)
        assertEquals(expected, result)
    }

    fun testBinarySearchTreeInOrder() {

       val bst = BinarySearchTree()
       bst.loadTree(41)
       bst.loadTree(20)
       bst.loadTree(65)
       bst.loadTree(11)
       bst.loadTree(29)
       bst.loadTree(50)
       bst.loadTree(91)
       bst.loadTree(5)
       bst.loadTree(15)
       bst.loadTree(24)
       bst.loadTree(32)
       bst.loadTree(45)
       bst.loadTree(55)
       bst.loadTree(72)
       bst.loadTree(99)
       bst.exploredNodesInOrder(bst.root)
        val result = bst.getTraversalNodesDisplayed()
        val expected = listOf(5,11,15,20,24,29,32,41,45,50,55,65,72,91,99)
        assertEquals(expected, result)
    }


    fun testNaryTreePreOrder() {
        NaryTree.setNumChildrenProperty(3)
        val nary = NaryTree()
        nary.loadTree(1)
        nary.loadTree(2)
        nary.loadTree(3)
        nary.loadTree(4)
        nary.loadTree(5)
        nary.loadTree(6)
        nary.loadTree(7)
        nary.loadTree(8)
        nary.loadTree(9)
        nary.loadTree(10)
        nary.loadTree(11)
        nary.loadTree(12)
        nary.loadTree(13)
        nary.exploredNodesPreOrder(nary.root)
        val result = nary.getTraversalNodesDisplayed()
        val expected = listOf(1,2,5,6,7,3,8,9,10,4,11,12,13)
        assertEquals(expected, result)
    }

    fun testNaryTreePostOrder() {
       NaryTree.setNumChildrenProperty(3)
       val nary = NaryTree()
       nary.loadTree(1)
       nary.loadTree(2)
       nary.loadTree(3)
       nary.loadTree(4)
       nary.loadTree(5)
       nary.loadTree(6)
       nary.loadTree(7)
       nary.loadTree(8)
       nary.loadTree(9)
       nary.loadTree(10)
       nary.loadTree(11)
       nary.loadTree(12)
       nary.loadTree(13)
       nary.exploredNodesPostOrder(nary.root)
        val result = nary.getTraversalNodesDisplayed()
        val expected = listOf(5,6,7,2,8,9,10,3,11,12,13,4,1)
        assertEquals(expected, result)
    }

    fun testNaryTreeInOrder() {
        NaryTree.setNumChildrenProperty(3)
        val nary = NaryTree()
        nary.loadTree(1)
        nary.loadTree(2)
        nary.loadTree(3)
        nary.loadTree(4)
        nary.loadTree(5)
        nary.loadTree(6)
        nary.loadTree(7)
        nary.loadTree(8)
        nary.loadTree(9)
        nary.loadTree(10)
        nary.loadTree(11)
        nary.loadTree(12)
        nary.loadTree(13)
        nary.resetCurrentNodePath()
        nary.exploredNodesInOrder(nary.root)
        val result = nary.getTraversalNodesDisplayed()
        val expected = listOf(5,2,6,7,1,8,3,9,10,11,4,12,13)
        assertEquals(expected, result)
    }



}